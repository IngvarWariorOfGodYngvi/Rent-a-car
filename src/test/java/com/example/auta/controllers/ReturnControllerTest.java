package com.example.auta.controllers;import com.example.auta.domain.entities.EmployeeEntity;import com.example.auta.domain.entities.RentEntity;import com.example.auta.domain.entities.ReservationEntity;import com.example.auta.domain.repositories.EmployeeRepository;import com.example.auta.domain.repositories.RentRepository;import com.example.auta.domain.repositories.ReservationRepository;import com.example.auta.domain.repositories.ReturnRepository;import com.example.auta.models.classes.Return;import com.example.auta.models.enums.ReservationStatus;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.web.client.TestRestTemplate;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.test.context.junit4.SpringRunner;import javax.persistence.EntityNotFoundException;import java.util.HashMap;import java.util.Map;import java.util.UUID;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class ReturnControllerTest {    @Autowired    private TestRestTemplate testRestTemplate;    @Autowired    private RentRepository rentRepository;    @Autowired    private ReturnRepository returnRepository;    @Autowired EmployeeRepository employeeRepository;    private EmployeeEntity employeeEntity;    private RentEntity rentEntity;    @Before    public void setUp() {        employeeEntity = employeeRepository.saveAndFlush(                EmployeeEntity.builder().surname("Kwiatkowski").build());        rentEntity = rentRepository.saveAndFlush(                RentEntity.builder().reservation(new ReservationEntity()).build());    }    @Test    public void addReturn() {        Return ret = Return.builder().endMileage(2530).build();        Map<String,String> params = new HashMap<>();        params.put("employeeUUID", employeeEntity.getId().toString());        params.put("rentUUID", rentEntity.getId().toString());        ResponseEntity<String> re = testRestTemplate                .postForEntity("/return/add?rentUUID={rentUUID}&employeeUUID={employeeUUID}",                               ret, String.class, params);        assertEquals(HttpStatus.OK, re.getStatusCode());        assertTrue(returnRepository.findById(UUID.fromString(                re.getBody().replace("\"",""))).isPresent());        assertEquals(ret.getEndMileage(), returnRepository                .findById(UUID.fromString(re.getBody().replace("\"","")))                .orElseThrow(EntityNotFoundException::new)                .getEndMileage());    }}