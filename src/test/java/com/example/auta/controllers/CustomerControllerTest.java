package com.example.auta.controllers;import com.example.auta.domain.entities.CustomerEntity;import com.example.auta.domain.repositories.CustomerRepository;import com.example.auta.models.classes.Customer;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.web.client.TestRestTemplate;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.web.client.RestClientResponseException;import org.springframework.web.server.ResponseStatusException;import javax.persistence.EntityExistsException;import java.util.Optional;import java.util.UUID;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class CustomerControllerTest {    @Autowired    private TestRestTemplate testRestTemplate;    @Autowired    private CustomerRepository customerRepository;    @Before    public void setUp() throws Exception {    }    @After    public void tearDown() throws Exception {        customerRepository.deleteAll();    }    @Test    public void addCustomer() throws Exception{        Customer customer = Customer.builder().surname("Rabczewska").build();        ResponseEntity<String> re = testRestTemplate.postForEntity("/customer/add",                                                                   customer,                                                                   String.class);        assertEquals(HttpStatus.OK, re.getStatusCode());        String uuid = Optional.ofNullable(re.getBody())                .orElseThrow(Exception::new)                .replace("\"", "");        assertTrue(customerRepository.findById(UUID.fromString(uuid)).isPresent());    }    @Test    public void removeCustomer() {        CustomerEntity customerEntity = CustomerEntity.builder().surname("Rabczewska").build();        customerEntity = customerRepository.saveAndFlush(customerEntity);        testRestTemplate.delete(String.format("/customer/%s/remove", customerEntity.getId().toString()));        assertTrue(!customerRepository.findById(customerEntity.getId()).isPresent());    }    @Test    public void updateCustomer() {        CustomerEntity customerEntity = CustomerEntity.builder().surname("Rabczewska").build();        customerEntity = customerRepository.saveAndFlush(customerEntity);        Customer customer = Customer.builder().surname("Piasecki").build();        testRestTemplate.put(String.format("/customer/%s/update", customerEntity.getId().toString()),                             customer);        customerEntity = customerRepository                .findById(customerEntity.getId())                .orElseThrow(EntityExistsException::new);        assertEquals(customer.getSurname(),customerEntity.getSurname());    }    @Test    public void getReservations() {    }}