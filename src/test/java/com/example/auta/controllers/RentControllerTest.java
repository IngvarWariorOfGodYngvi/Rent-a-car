package com.example.auta.controllers;import com.example.auta.domain.entities.*;import com.example.auta.domain.repositories.*;import com.example.auta.models.classes.Employee;import com.example.auta.models.classes.Rent;import com.example.auta.models.enums.ReservationStatus;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.web.client.TestRestTemplate;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.test.context.junit4.SpringRunner;import javax.persistence.EntityNotFoundException;import java.util.HashMap;import java.util.Map;import java.util.UUID;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class RentControllerTest {    @Autowired    private TestRestTemplate testRestTemplate;    @Autowired    private EmployeeRepository employeeRepository;    @Autowired    private ReservationRepository reservationRepository;    @Autowired    private RentRepository rentRepository;    private EmployeeEntity employeeEntity;    private ReservationEntity reservationEntity;    @Before    public void setUp() {        employeeEntity = employeeRepository.saveAndFlush(                EmployeeEntity.builder().surname("Kwiatkowski").build());        reservationEntity = reservationRepository.saveAndFlush(                ReservationEntity.builder().reservationStatus(ReservationStatus.BOOKED).build());    }    @After    public void tearDown() {        rentRepository.deleteAll();        employeeRepository.deleteAll();        reservationRepository.deleteAll();    }    @Test    public void updateRentComment() {        RentEntity rentEntity = rentRepository.saveAndFlush(                RentEntity.builder().comment("comment a").build());        ResponseEntity<String> re = testRestTemplate.postForEntity(                String.format("/rent/%s/updatecomment", rentEntity.getId()),                "comment b", String.class);        assertEquals(HttpStatus.OK, re.getStatusCode());        assertEquals("comment b", rentRepository                .findById(rentEntity.getId())                .orElseThrow(EntityNotFoundException::new)                .getComment());    }    @Test    public void addRent() {        Rent rent = Rent.builder().comment("Comment").build();        Map<String,String> params = new HashMap<>();        params.put("employeeUUID", employeeEntity.getId().toString());        params.put("reservationUUID", reservationEntity.getId().toString());        ResponseEntity<String> re = testRestTemplate                .postForEntity("/rent/add?reservationUUID={reservationUUID}&employeeUUID={employeeUUID}",                               rent, String.class, params);        assertEquals(HttpStatus.OK, re.getStatusCode());        assertTrue(rentRepository.findById(UUID.fromString(                re.getBody().replace("\"",""))).isPresent());    }}